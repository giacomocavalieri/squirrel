---
version: 1.2.3
title: query that needs more than a single helper function
file: ./test/squirrel_test.gleam
test_name: query_that_needs_more_than_a_single_helper_function_test
---
import decode/zero
import pog
import youid/uuid.{type Uuid}

/// A row you get from running the `query` query
/// defined in `query.sql`.
///
/// > 🐿️ This type definition was generated automatically using v-test of the
/// > [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub type QueryRow {
  QueryRow(gen_random_uuid: Uuid, date: pog.Date)
}

/// Runs the `query` query
/// defined in `query.sql`.
///
/// > 🐿️ This function was generated automatically using v-test of
/// > the [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub fn query(db) {
  let decoder = {
    use gen_random_uuid <- zero.field(0, uuid_decoder())
    use date <- zero.field(1, date_decoder())
    zero.success(QueryRow(gen_random_uuid:, date:))
  }

  let query = "select gen_random_uuid(), 'Jan-2-1970'::date"

  pog.query(query)
  |> pog.returning(zero.run(_, decoder))
  |> pog.execute(db)
}

// --- Encoding/decoding utils -------------------------------------------------

/// A decoder to decode `date`s coming from a Postgres query.
///
fn date_decoder() {
  use dynamic <- zero.then(zero.dynamic)
  case pog.decode_date(dynamic) {
    Ok(date) -> zero.success(date)
    Error(_) -> zero.failure(pog.Date(0, 0, 0), "date")
  }
}

/// A decoder to decode `Uuid`s coming from a Postgres query.
///
fn uuid_decoder() {
  use bit_array <- zero.then(zero.bit_array)
  case uuid.from_bit_array(bit_array) {
    Ok(uuid) -> zero.success(uuid)
    Error(_) -> zero.failure(uuid.v7(), "uuid")
  }
}
