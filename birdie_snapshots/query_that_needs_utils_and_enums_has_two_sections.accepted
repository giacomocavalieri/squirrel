---
version: 1.2.3
title: query that needs utils and enums has two sections
file: ./test/squirrel_test.gleam
test_name: query_that_needs_utils_and_enums_has_two_sections_test
---
import decode/zero
import gleam/pgo

/// A row you get from running the `query` query
/// defined in `query.sql`.
///
/// > 🐿️ This type definition was generated automatically using v-test of the
/// > [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub type QueryRow {
  QueryRow(squirrel_colour: SquirrelColour, date: #(Int, Int, Int))
}

/// Runs the `query` query
/// defined in `query.sql`.
///
/// > 🐿️ This function was generated automatically using v-test of
/// > the [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub fn query(db) {
  let decoder = {
    use squirrel_colour <- zero.field(0, squirrel_colour_decoder())
    use date <- zero.field(1, date_decoder())
    zero.success(QueryRow(squirrel_colour:, date:))
  }

  "select 'red'::squirrel_colour, 'Jan-2-1970'::date"
  |> pgo.execute(db, [], zero.run(_, decoder))
}

// --- Enums -------------------------------------------------------------------

pub type SquirrelColour {
  LightBrown
  Grey
  Red
}

fn squirrel_colour_decoder() {
  use variant <- zero.then(zero.string)
  case variant {
    "light brown" -> zero.success(LightBrown)
    "grey" -> zero.success(Grey)
    "red" -> zero.success(Red)
    _ -> zero.failure(LightBrown, "SquirrelColour")
  }
}

// --- Encoding/decoding utils -------------------------------------------------

/// A decoder to decode `date`s coming from a Postgres query.
///
fn date_decoder() {
  use dynamic <- zero.then(zero.dynamic)
  case pgo.decode_date(dynamic) {
    Ok(date) -> zero.success(date)
    Error(_) -> zero.failure(#(0, 0, 0), "date")
  }
}
