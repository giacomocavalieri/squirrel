---
version: 1.4.0
title: recursive common table query with semi join
file: ./test/squirrel_test.gleam
test_name: recursive_common_table_query_with_semi_join_test
---

import gleam/dynamic/decode
import pog
import youid/uuid.{type Uuid}

pub type QueryRow {
  QueryRow(id: Uuid, name: String)
}

pub fn query(
  db: pog.Connection,
  arg_1: Uuid,
) -> Result(pog.Returned(QueryRow), pog.QueryError) {
  let decoder = {
    use id <- decode.field(0, uuid_decoder())
    use name <- decode.field(1, decode.string)
    decode.success(QueryRow(id:, name:))
  }

  "
with recursive subcategories as (
  select id
  from categories_issue75
  where id = $1

  union all

  select c.id
  from categories_issue75 c
  join subcategories sc on c.parent_id = sc.id
)
select i.id, i.name
from items_issue75 i
left join items_categories_issue75 ic on ic.item_id = i.id
where ic.category_id in (select id from subcategories);"
  |> pog.query
  |> pog.parameter(pog.text(uuid.to_string(arg_1)))
  |> pog.returning(decoder)
  |> pog.execute(db)
}


fn uuid_decoder() {
  use bit_array <- decode.then(decode.bit_array)
  case uuid.from_bit_array(bit_array) {
    Ok(uuid) -> decode.success(uuid)
    Error(_) -> decode.failure(uuid.v7(), "Uuid")
  }
}

