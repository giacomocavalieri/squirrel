---
version: 1.2.6
title: custom type encoding
file: ./test/squirrel_test.gleam
test_name: custom_type_encoding_test
---
import gleam/dynamic/decode
import pog

/// A row you get from running the `query` query
/// defined in `query.sql`.
///
/// > 🐿️ This type definition was generated automatically using v-test of the
/// > [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub type QueryRow {
  QueryRow(res: Int)
}

/// Runs the `query` query
/// defined in `query.sql`.
///
/// > 🐿️ This function was generated automatically using v-test of
/// > the [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub fn query(db, arg_1) {
  let decoder = {
    use res <- decode.field(0, decode.int)
    decode.success(QueryRow(res:))
  }

  "select 1 as res where $1::custom_type = ('red', 'wibble')::custom_type"
  |> pog.query
  |> pog.parameter(custom_type_encoder(arg_1))
  |> pog.returning(decoder)
  |> pog.execute(db)
}

// --- Enums -------------------------------------------------------------------

/// Corresponds to the Postgres `squirrel_colour` enum.
///
/// > 🐿️ This type definition was generated automatically using v-test of the
/// > [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub type SquirrelColour {
  LightBrown
  Grey
  Red
}

fn squirrel_colour_encoder(variant) {
  case variant {
    LightBrown -> "light brown"
    Grey -> "grey"
    Red -> "red"
  }
  |> pog.text
}

// --- Custom types ------------------------------------------------------------

/// Corresponds to the Postgres `custom_type` type.
///
/// > 🐿️ This type definition was generated automatically using v-test of the
/// > [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub type CustomType {
  CustomType(name: Option(String), colour: Option(SquirrelColour))
}

fn custom_type_encoder(custom_type) {
  let CustomType(name:, colour:) = custom_type

  let encoded_fields = [
    pog.nullable(fn(value) { pog.text(value) }, name),
    pog.nullable(fn(value) { squirrel_colour_encoder(value) }, colour),
  ]

  pog.array(fn(value) { value }, encoded_fields)
}
