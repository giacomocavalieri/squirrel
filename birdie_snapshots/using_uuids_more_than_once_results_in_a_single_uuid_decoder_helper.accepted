---
version: 1.2.1
title: using uuids more than once results in a single uuid decoder helper
file: ./test/squirrel_test.gleam
test_name: using_uuids_more_than_once_results_in_a_single_uuid_decoder_helper_test
---
import decode
import gleam/pgo
import youid/uuid.{type Uuid}

/// A row you get from running the `one` query
/// defined in `one.sql`.
///
/// > 🐿️ This type definition was generated automatically using v-test of the
/// > [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub type OneRow {
  OneRow(gen_random_uuid: Uuid)
}

/// Runs the `one` query
/// defined in `one.sql`.
///
/// > 🐿️ This function was generated automatically using v-test of
/// > the [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub fn one(db) {
  let decoder =
    decode.into({
      use gen_random_uuid <- decode.parameter
      OneRow(gen_random_uuid: gen_random_uuid)
    })
    |> decode.field(0, uuid_decoder())

  "select gen_random_uuid()"
  |> pgo.execute(db, [], decode.from(decoder, _))
}

/// A row you get from running the `other` query
/// defined in `other.sql`.
///
/// > 🐿️ This type definition was generated automatically using v-test of the
/// > [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub type OtherRow {
  OtherRow(gen_random_uuid: Uuid)
}

/// Runs the `other` query
/// defined in `other.sql`.
///
/// > 🐿️ This function was generated automatically using v-test of
/// > the [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub fn other(db) {
  let decoder =
    decode.into({
      use gen_random_uuid <- decode.parameter
      OtherRow(gen_random_uuid: gen_random_uuid)
    })
    |> decode.field(0, uuid_decoder())

  "select gen_random_uuid()"
  |> pgo.execute(db, [], decode.from(decoder, _))
}


// --- UTILS -------------------------------------------------------------------

/// A decoder to decode `Uuid`s coming from a Postgres query.
///
fn uuid_decoder() {
  decode.then(decode.bit_array, fn(uuid) {
    case uuid.from_bit_array(uuid) {
      Ok(uuid) -> decode.into(uuid)
      Error(_) -> decode.fail("uuid")
    }
  })
}
