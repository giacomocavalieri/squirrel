---
version: 1.2.5
title: asasdasdas
---
import gleam/dynamic/decode
import pog
import youid/uuid.{type Uuid}

/// A row you get from running the `query` query
/// defined in `query.sql`.
///
/// > 🐿️ This type definition was generated automatically using v-test of the
/// > [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub type QueryRow {
  QueryRow(id: Uuid)
}

/// Runs the `query` query
/// defined in `query.sql`.
///
/// > 🐿️ This function was generated automatically using v-test of
/// > the [squirrel package](https://github.com/giacomocavalieri/squirrel).
///
pub fn query(db, arg_1) {
  let decoder = {
    use id <- decode.field(0, uuid_decoder())
    decode.success(QueryRow(id:))
  }

  "
with recursive subcategories as (
  select id
  from categories_issue75
  where id = $1

  union all

  select c.id
  from categories_issue75 c
  join subcategories sc on c.parent_id = sc.id
)
select i.id
from items_issue75 i
left join items_categories_issue75 ic on ic.item_id = i.id
where ic.category_id in (select id from subcategories);"
  |> pog.query
  |> pog.parameter(pog.text(uuid.to_string(arg_1)))
  |> pog.returning(decoder)
  |> pog.execute(db)
}

// --- Encoding/decoding utils -------------------------------------------------

/// A decoder to decode `Uuid`s coming from a Postgres query.
///
fn uuid_decoder() {
  use bit_array <- decode.then(decode.bit_array)
  case uuid.from_bit_array(bit_array) {
    Ok(uuid) -> decode.success(uuid)
    Error(_) -> decode.failure(uuid.v7(), "uuid")
  }
}
